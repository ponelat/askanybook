#!/usr/bin/env ruby
# Credit for this hack: https://stackoverflow.com/a/41194935/3933724
exec("/usr/bin/env","rails","runner",$0,*ARGV) unless defined?(Rails)

# frozen_string_literal: true

require 'dotenv/load'
require 'optparse'
require 'csv'
require 'pdf-reader'

DEFAULT_PROMPT_TEMPLATE = "
You are not an assistant, you are a book that aims to answer specific questions about its contents.
The context most specific to the upcoming question is the following:
$$context.

Based on that, please answer the following question.
Q: $$question.
A: "

options = {}
opts_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: csv-to-embeddings [options]'
  opts.separator ' '
  opts.separator "\tOPENAI_API_KEY (required). As ENV variable or entry in .env"
  opts.separator ' '
  opts.on('-f', '--file FILENAME', 'Specify input CSV file [id,content] (required)')
  opts.on('-o', '--output FILENAME', "Specify output CSV file [id,content,0...#{OpenaiMagic::EMBEDDINGS_DIMENSIONS}]")
  opts.on('-v', '--verbose', 'Dump debugging info')
end
opts_parser.parse!(into: options)
options[:openai_key] = ENV['OPENAI_API_KEY']

# Check that the required option is present
begin
  raise OptionParser::MissingArgument if options[:file].nil?
  raise OptionParser::MissingArgument if options[:openai_key].nil?
rescue OptionParser::MissingArgument
  puts opts_parser.help
  exit 1
end

logger = Logger.new(STDOUT)
logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO

# OpenAI client
ai_magic = OpenaiMagic.new(options[:openai_key])

# Read in PDF to list of pages.
reader = PDF::Reader.new(options[:file])

# For each page get an Embed
list_of_embeddings = []
reader.pages.each do |page|
  id = "page-#{page.number}"
  content = OpenaiMagic.sanitize_text(page.text)
  logger.debug("Santizing page: #{page.text[0, 30]}")

  logger.debug('Fetching embedding...')
  embedding_res = ai_magic.get_embedding(content)
  logger.debug('...fetched')
  tokens = embedding_res.usage.total_tokens

  embed = Embed.new(
    id: id,
    content: content,
    tokens: tokens,
    embedding: embedding_res.embedding
  )

  logger.info("Embedded #{id} with #{tokens} tokens")
  list_of_embeddings << embed
end

# Name of book
name = File.basename(options[:file], '.*')
logger.debug("Using name: #{name}")

# Write the {name}.embeddings.csv
embeds_csv = Embeds.new(list_of_embeddings).to_csv_s
embeds_path = File.join(File.dirname(__FILE__), '..', 'books', "#{name}.embeds.csv")
logger.debug("Writing #{embeds_path}")
File.write(embeds_path, embeds_csv, mode: "wb")

# Write the {name}.manifest.csv
manifest = PersonaManifest.new(
  embeds_path: "./#{name}.embeds.csv",
  prompt_template: DEFAULT_PROMPT_TEMPLATE
)

manifest_path = File.join(File.dirname(__FILE__), '..', 'books', "#{name}.manifest.csv")
logger.debug("Writing #{manifest_path}")
File.write(manifest_path, manifest.to_csv_s, mode: "wb")

puts ''
puts '---'
puts ''
puts "Finished embedding #{name}! #{list_of_embeddings.length} pages.
Wrote out books/#{name}.embeds.csv
Go update books/#{name}.manifest.csv
...to adjust the prompt template.
$$contest and $$question are placeholders.

To test out your embed.
bin/askbook --book books/#{name}.manifest.csv --question 'What is this book about?'
"
