#!/usr/bin/env ruby
require 'dotenv/load'
require "optparse"
require "csv"
require_relative '../lib/shared/openai_magic'
require_relative '../lib/shared/embeds'

options = {}
opts_parser = OptionParser.new do |opts|
  opts.banner = "Usage: csv-to-embeddings [options]"
  opts.separator " "
  opts.separator "\tOPENAI_API_KEY (required). As ENV variable or entry in .env"
  opts.separator " "
  opts.on("-f", "--file FILENAME", "Specify input CSV file [id,content] (required)")
  opts.on("-o", "--output FILENAME", "Specify output CSV file [id,content,0...#{OpenAIMagic::EMBEDDINGS_DIMENSIONS}]")
end
opts_parser.parse!(into: options)
options[:openai_key] = ENV['OPENAI_API_KEY']

# Check that the required option is present
begin
  raise OptionParser::MissingArgument if options[:file].nil?
  raise OptionParser::MissingArgument if options[:openai_key].nil?
rescue OptionParser::MissingArgument
  puts opts_parser.help
  exit 1
end

ai_magic = OpenAIMagic.new(options[:openai_key])
name = File.basename(options[:file], ".*")
output_name = options[:output] or "#{name}.embeddings.csv"

puts "Getting embeddings for #{options[:file]}"

# Load content
contents = []
CSV.foreach(options[:file], headers: true) do |row|
  id = row['id']
  content = row['content']
  contents << [id, content]
end

# Get embeddings for each
counter = 0
list_of_embeddings = []
contents.each do |row|
  id,content = row
  response = ai_magic.get_embedding(content)
  embedding = response[:embedding]
  tokens = response[:tokens]
  puts "Embedded #{counter}: tokens(#{tokens}) #{id} - #{OpenAIMagic.sanitize_text(content)}\n"
  counter += 1
  list_of_embeddings << { id: id, content: content, embedding: embedding, tokens: tokens }
end

# So  that we serialize it the right way
embeddings = Embeds.new(list_of_embeddings)
File.write(output_name, embeddings.to_csv_s)

puts "Done, embeddings are in #{output_name}"
