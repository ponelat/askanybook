#!/usr/bin/env ruby
require 'dotenv/load'
require "optparse"
require "csv"
require_relative '../lib/shared/openai_magic'

options = {}
opts_parser = OptionParser.new do |opts|
  opts.banner = "Usage: csv-to-embeddings [options]"
  opts.separator " "
  opts.separator "\tOPENAI_API_KEY (required). As ENV variable or entry in .env"
  opts.separator " "
  opts.on("-f", "--file FILENAME", "Specify input CSV file [id,content] (required)")
  opts.on("-o", "--output FILENAME", "Specify output CSV file [id,content,0...#{OpenAIMagic::EMBEDDINGS_DIMENSIONS}]")
end
opts_parser.parse!(into: options)
options[:openai_key] = ENV['OPENAI_API_KEY']

# Check that the required option is present
begin
  raise OptionParser::MissingArgument if options[:file].nil?
  raise OptionParser::MissingArgument if options[:openai_key].nil?
rescue OptionParser::MissingArgument
  puts opts_parser.help
  exit 1
end

ai_magic = OpenAIMagic.new(options[:openai_key])
name = File.basename(options[:file], ".*")
output_name = options[:output] or "#{name}.embeddings.csv"
puts "Getting embeddings for #{options[:file]}"

contents = []
CSV.foreach(options[:file], headers: true) do |row|
  id = row['id']
  content = row['content']
  contents << [id, content]
end

CSV.open(output_name, "wb") do |csv|
  csv << ['id', 'content'] + (0...OpenAIMagic::EMBEDDINGS_DIMENSIONS).to_a
  counter = 0

  contents.each do |row|
    id,content = row
    embedding = ai_magic.get_embedding(content)
    puts "Embedded #{counter}:  #{id} - #{OpenAIMagic.sanitize_text(content)}\n"
    counter += 1
    csv << [id, content] + embedding
  end

end

puts "Done, embeddings are in #{output_name}"
